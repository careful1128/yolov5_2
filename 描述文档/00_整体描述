一，编写test_detect.py文件
     Note：如果采用github上下载源码的操作或者本地代码的执行方式的话，注意requirements.txt里面的内容（会检查）-->可以把这个文件改名或者删除或者内容注释

二.项目结构讲解
    文件夹:
        classify:负责分类模型
        data：数据定义
        models：模型相关代码文件夹
        runs：默认运行输出文件
        utils：工具相关的代码文件
    文件：
        detect.py：目标检测的应用代码
        export.py:将pytorch模型转化成其他结构的代码
        hubconf.py：针对torch.hub.load API开发的入口代码，内部包含了模型构建相关，恢复相关的代码
        train.py：训练入口代码
        val.py：校验评估入口代码
        models/*.yaml:模型结构参数配置文件，运行的时候通过参数：“--cfg”给定（做迁移要给定）

三.模型训练
     1.c直接运行train.py
     默认情况下会下载coco128数据集放到当前项目文件夹所在的dataset文件夹中
     默认情况下会下载yolo5s.pt模型文件放到当前项目文件夹中
        修改以下内容：
           a.添加gc以及内存，显卡相关的注释代码
           b.修改参数内容（给定epoch的次数，给定路径）
           c.如果机器内存小（修改batch_size为4或者8）
        运行之后就可以在对应输出路径中查看结果信息
        NOTE：如果运行的时候出现内存相关的异常，可以考虑下面相关的调整的方式：
            1.调整batch_size的参数大小，从16改成8或者4
            2.添加gc以及内存，显卡相关的释放代码
            3.调整一下worker参数（控制数据加载的并行度8改为2）
            4.yolov5代码默认的测试数据集的加载并行度是worker*2，改成workers即可。
            5.修改dataloaders.py的147行，将参数pin_memory更改为False
四.train.py代码解析
    方法功能说明：
        train：训练的核心代码
        parse_opt：获取运行入参
        main：主入口函数

    调用链路： main --> train

五.yolov5模型可视化
    通过netron进行可视化操作,运行export.py文件即可
    显然该图没有显示输出输出的尺寸，为此我们修改 export.py 代码，并重新导出onnx，显示为下图。
        # Checks
        model_onnx = onnx.load(f)  # load onnx model
        onnx.checker.check_model(model_onnx)  # check onnx model

        # Metadata
        d = {'stride': int(max(model.stride)), 'names': model.names}
        for k, v in d.items():
            meta = model_onnx.metadata_props.add()
            meta.key, meta.value = k, str(v)
        onnx.save(shape_inference.infer_shapes(model_onnx), f)
六，三个事儿：
    1.将export.py中模型导出为onnx格式的代码抽出来作为单独的py文件执行看看
    2.将detect.py中的代码抽取出来：模型恢复的代码，单个图像预测的代码（边框坐标+预测类别+置信度），图像可视化代码
    （reatapi.py中也是预测代码，但是计算量太大了）
    3.NMS里面用的是IOU，你实现一个DIOU-NMS
        实现方式：
            a.查看nms的实现代码
                a1.参考ppt自己实现
                a2.去github搜素一个nms的python实现
                a3.看Pytorch底层的C++/C实现nms代码
            b.将nms实现代码里面的IOU计算代码更改为DIOU计算代码即可
七，yolov5训练自己数据集步骤（迁移了coco数据集上的yolov5的模型参数）：
    1.用labelImg进行标注
    2.修改配置文件
        2.1模型配置文件：models/yolov5s.yaml复制-->wzry/wzry_model.yaml 修改nc（number of classes）
            在yolov5/models先复制一份yolov5s.yaml至wzry，更名为wzry_model.yaml（意为模型），只将如下的nc修改为训练集种类即可
        2.2数据配置文件：wzry/wzry_parameter.yaml 修改nc names
            在yolov5/data/coco128.yaml中先复制一份，粘贴到wzry中，改名为wzry_parameter.yaml（意义为wzry的参数配置）
            wzry_parameter.yaml文件需要修改的参数是nc与names。nc是标签名个数，names就是标签的名字，王者荣耀的例子中有10个标签，标签名字都如下。
        2.3超参数配置文件：data/hyps/hyp.scratch-low.yaml
    3.命令行运行：
        python train.py --weights ./yolov5s.pt --cfg ./models/yolov5s_flowers.yaml --data ./data/flowers.yaml --hyp data/hypa/hyp.scratch-low.yaml
        此处注意修改yaml文件的地址